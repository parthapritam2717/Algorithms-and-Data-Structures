/*Graph implementation using vector of vector of nodes*/

#include<stdlib.h>
#include<stdio.h>
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<limits>
#include<list>
#include<map>
#include<set>
#include<time.h>
#include <queue>
#include<math.h>
#include<cstring>
#include<unordered_set>
#include<unordered_map>
#include<stack>
#include <iomanip>

using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef vector<pii> vpi;
typedef vector<pll> vpl;
typedef vector<string> vs;
typedef unordered_map<int,int> umap;
typedef map<long long,long long> omap;
typedef multimap<long long,long long> mmap;

#define si(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define all(v) v.begin(),v.end()
#define Pi(x) printf("%d", x)
#define Pl(x) printf("%lld", x)
#define os() printf(" ")
#define nl() printf("\n");
#define F first
#define S second
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define PI 3.14159265
#define mem(x,i) memset(x,i,sizeof(x))
#define fori(i,s,n) for(int i=(s);i<(n);++i)
#define forl(i,s,n) for(ll i=(s);i<(n);++i)
#define forir(i,s,n) for(int i=(n)-1;i>=(s);--i)
#define forlr(i,s,n) for(ll i=(n)-1;i>=(s);--i)
#define INF 8944674407370955161LL
#define debug(i,st,arr) fori(i,0,st){cout<<arr[i]<<" ";}cout<<endl;
#define debugl(i,st,arr) forl(i,0,st){cout<<arr[i]<<" ";}cout<<endl;
#define forci(i,sw) for((i)=(sw).begin();(i)!=(sw).end();++(i))
#define forcr(i,sw) for((i)=(sw).rbegin();(i)!=(sw).rend();++(i))



void dfsUtil(vector<vector<int> > &graph,vector<bool> &vis,int start){
	vis[start]=1;
	cout<<start<<"->";
	for(int i=0;i<graph[start].size();++i){
		if(vis[start][i]==0){
			dfsUtil(graph,vis,graph[start][i]);
		}
	}

}

void dfs(vector<vector<int> > &graph){
	vector<bool> vis(graph.size(),0);
	dfsUtil(graph,vis,0);
	cout<<"NULL";
}

void printGraph(vector<vector<int> > &graph){
	for(int i=0;i<graph.size();++i){
		cout<<i<<"->";
		for(int j=0;j<graph[i].size();++j){
			cout<<graph[i][j]<<"->";
		}
		cout<<"NULL";
		cout<<endl;
	}
}
int main(){
	
	int n,e;// number of nodes and edges
	cin>>n>>e;
	vector<vector<int> > graph(n);
	for(int i=0;i<e;++i){
		int source,dest;
		cin>>source>>dest;
		// now lets fill the graph accordingly
		graph[source].pb(dest);
	}
	// now lets print the graph and see if we have succesfully implemented the graph
	printGraph(graph);    
    return 0;

}



